#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES

#include <iostream>
#include <bits/stdc++.h>
#include <sstream>
#include <cstdint>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <math.h>
#include <algorithm>
#include <string>
#include <numeric>
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define NITRO ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
//#define mod 1000000007
#define ll long long
#define workWithFiles freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout)
const long double pi = 3.14159265359;
#define debug1(a) cout<<#a<<" = "<<(a)<<endl;
#define debug2(a,b) cout<<#a<<" = "<<(a)<<", "<<#b<<" = "<<(b)<<endl;
#define debug3(a,b,c) cout<<#a<<" = "<<(a)<<", "<<#b<<" = "<<(b)<<", "<<#c<<" = "<<(c)<<endl;
#define debug4(a,b,c,d) cout<<#a<<" = "<<(a)<<", "<<#b<<" = "<<(b)<<", "<<#c<<" = "<<(c)<<", "<<#d<<" = "<<(d)<<endl;
#define debug5(a,b,c,d,e) cout<<#a<<" = "<<(a)<<", "<<#b<<" = "<<(b)<<", "<<#c<<" = "<<(c)<<", "<<#d<<" = "<<(d)<<", "<<#e<<" = "<<(e)<<endl;
#include <nmmintrin.h>



#include <iostream>
#include <bits/stdc++.h>
using namespace std;


int n, k;

vector<int> v;

vector<vector<int>> cameFrom;

void printAllPaths(int n, vector<int> v){
    if(n == 0) {
        reverse(all(v));
        for(int x : v) cout<<x<<"->";
        cout<<endl;
    }
    for(int x : cameFrom[n]){
        v.push_back(x);
        printAllPaths(x, v);
        v.pop_back();
    }
}

int32_t main()
{
    cin>>n >> k;
    v.resize(n);
    for(int &x : v) cin>>x;
    vector<int> dp(n+1);

    cameFrom.resize(n, vector<int>());
    dp[0] = 0;
    for(int i = 1; i<n; i++){
        int res = INT_MAX;
        vector<int> possible;
        for(int x = 1; x<=k && i-x >=0; x++){
            int currRes =  dp[i-x] + abs(v[i] - v[i-x]);
            if(currRes < res){
                possible.clear();
                possible.push_back(i-x);
                res = currRes;
            }
            else if(currRes == res){
                possible.push_back(i-x);
            }
        }
        cout<<i << "(";
        for(int x : possible) cout<< x<<  " ";
        cout<<")"<<endl;
        cameFrom[i] = possible;
        dp[i] = res;
    }                      a
    printAllPaths(n-1, vector<int>(1,n-1));

    cout<<dp[n-1];
    //cout<<solve(n-1);
}
//https://atcoder.jp/contests/dp/tasks/dp_b
